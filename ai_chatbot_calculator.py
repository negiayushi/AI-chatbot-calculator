# -*- coding: utf-8 -*-
"""AI ChatBOT Calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zbZlrHjoEgNh9pRqMsNWVySauMw8p7zO
"""

pip install transformers torch sympy

from transformers import pipeline
import re
import sympy as sp

# Load a pre-trained NLP model for intent recognition
nlp = pipeline("text-classification", model="distilbert-base-uncased")

# Define a function to extract math expressions from user input
def extract_math_expression(text):
    # Use regex to find math expressions
    pattern = r"(\d+\s*[\+\-\*/]\s*\d+)|(\b(sin|cos|tan|sqrt|log)\b\s*\(\s*\d+\s*\))"
    matches = re.findall(pattern, text)
    if matches:
        return matches[0][0] or matches[0][1]  # Return the first match
    return None

# Define a function to evaluate the math expression
def calculate(expression):
    try:
        # Use sympy for safe evaluation
        result = sp.sympify(expression)
        return float(result.evalf())
    except Exception as e:
        return f"Error: {e}"

# Main chatbot loop
def chatbot_calculator():
    print("Hello! I'm your AI chatbot calculator. How can I assist you today?")
    while True:
        user_input = input("You: ")
        if user_input.lower() in ["exit", "quit", "bye"]:
            print("Chatbot: Goodbye!")
            break

        # Extract math expression from user input
        expression = extract_math_expression(user_input)
        if expression:
            result = calculate(expression)
            print(f"Chatbot: The result of {expression} is {result}.")
        else:
            print("Chatbot: Sorry, I couldn't find a valid math expression in your input. Please try again.")

# Run the chatbot
if __name__ == "__main__":
    chatbot_calculator()